;;; xdic.el ---- major mode to view dictionary
;;; $Id$

;;; Author: Tsuchiya Masatoshi <tsuchiya@pine.kuee.kyoto-u.ac.jp>
;;; Keywords: dictionary

;;; Commentary:

;; 英和辞書を閲覧する目的で作成した major mode です。
;; 利用及び再配布の際は、GNU 一般公用許諾書の適当なバージョンにしたがっ
;; て下さい。

;; 一次配布元
;;    http://www-nagao.kuee.kyoto-u.ac.jp/member/tsuchiya/elisp/xdic.html


;;; ※※※ 注意 ※※※

;; このプログラムは、まだ作成されたばかりですので、これから多数の変更
;; が出ると思われます。注意して使ってください。
;;
;; また、こんな機能が欲しいとか、動作が希望と違うなど、要望があれば遠
;; 慮なく連絡してください。出来るだけ対応したいと思います。


;;; How to Install

;;	(1) xdic.el と stem.el を適当な場所に保存して下さい。必要なら
;;	    バイトコンパイルして下さい。
;;	(2) 辞書を検索するために look を呼び出しています。パスが通って
;;	    いるか確認して下さい。
;;	(3) 辞書を変換して、適当な場所に保存して下さい。
;;	    xdic.el は、辞書のそれぞれのレコードが1つの見出し語と1つの
;;	    説明文からなり、かつ見出し語と説明文がタブで区切られている
;;	    ことを要求します。
;;	(4) .emacs に次のようなコードを挿入します。
;;
;;		(autoload 'xdic:describe-word "xdic" "英単語の意味を調べる" t nil)
;;		(global-set-key "\C-cw" 'xdic:describe-word)
;;
;;	    好みに合わせて適当にキーバインドは変更して下さい。

;; Emacs20 で使う場合は、
;;
;;		(set-language-environment "Japanese")
;;		(set-terminal-coding-system 'euc-japan)
;;
;; と .emacs に設定されているか確認してください。


;; -*- Emacs-Lisp -*-


;;; カスタマイズ用変数

;;; 辞書に関する変数
(defvar xdic:dictionary (expand-file-name "~/usr/lib/elisp/gene.dic")
  "検索に用いる辞書のファイル名")
(defvar xdic:dictionary-kanji-code 'euc-japan "辞書の漢字コード")

;;; 検索結果の表示を調整する変数
(defvar xdic:left-margin 2 "説明文の left margin")
(defvar xdic:fill-column default-fill-column "説明文の fill column")
(defvar xdic:window-height 10 "検索結果表示ウインドウの高さ")
(defvar xdic:disable-select-window nil
  "検索結果表示ウインドウに常にカーソルを移動する場合に nil を設定する")
(defvar xdic:left-margin-ignored-by-fill-region (string-match "19\\.28" emacs-version)
  "fill-region 関数が left-margin の設定を無視する場合は Non nil を設定する")

;;; キーバインドを調節する変数
(defvar xdic:disable-vi-key nil
  "辞書閲覧に vi ライクのキーを使う場合に nil を設定する")



(defconst xdic:version "1.5")

(defconst xdic:buffer-name "*xdic*" "検索結果表示バッファの名前")
(defconst xdic:mode-name "Xdic" "検索結果を表示するバッファの major mode")

(defconst xdic:search-program "look" "検索に用いるプログラム")
(defconst xdic:program-option "-f" "検索に用いるプログラムのオプション")




;;; ここから本体


;;; -tion, -ize などの語尾変化を処理するためのライブラリをロード
(require 'stem)

;;; Emacs20 では、look が使う漢字コードの設定が必要
(if (= emacs-major-version 20)
    (setq process-coding-system-alist (cons (cons ".*look" xdic:dictionary-kanji-code)
					    (if (boundp 'process-coding-system-alist)
						process-coding-system-alist))))

;;; Emacs19.28 ベースの Mule2.3 では previous-overlay-change が未定義
;;; なので代替関数を定義する
(or (fboundp 'previous-overlay-change)
    (defun previous-overlay-change (pos) "\
Return the previous position before POS where an overlay starts or ends.
If there are no more overlay boundaries before POS, return (point-min)."
      (if (> pos (point-max))
	  (error "Specified position is larger than point-max"))
      (save-excursion
	(let (next (prev (point-min)))
	  (while (> pos (setq next (next-overlay-change prev)))
	    (setq prev next))
	  prev))))




(defun xdic:word-at-point () "\
カーソル位置の英単語を返す関数"
  (save-excursion
    (if (not (looking-at "\\<"))
        (forward-word -1))
    (if (looking-at "[A-Za-z]+")
	(downcase (buffer-substring (match-beginning 0) (match-end 0))))))



(defvar xdic:read-minibuffer-history '() "\
xdic:read-from-minibuffer 関数のヒストリ")
(defun xdic:read-from-minibuffer (&optional prompt init) "\
ミニバッファから英単語を読みとる関数"
  (or init (setq init (or (xdic:word-at-point) "")))
  (setq xdic:read-minibuffer-history
	(cons init xdic:read-minibuffer-history))
  (downcase
   (read-from-minibuffer (or prompt "Input word : ") init
			 nil nil '(xdic:read-minibuffer-history . 1))))



(defun xdic:lookup-dictionary (string) "\
辞書を検索した結果をバッファに書き込む関数
検索前に
  (setq buffer-read-only nil)
  (erase-buffer)
を行なう"
  (set-buffer (get-buffer-create xdic:buffer-name))
  (or (string= mode-name xdic:mode-name)
      (xdic-mode))
  (if (file-readable-p xdic:dictionary)
      (progn
	(setq buffer-read-only nil)
	(erase-buffer)
	(call-process xdic:search-program nil t nil xdic:program-option string xdic:dictionary)
	(/= 0 (buffer-size)))
   (not (message "Can't read file : %s" xdic:dictionary))))



(defun xdic:fill-region (start end) "\
fill-region の wrapper
Emacs のバージョンによって異なっている fill-region の動作の違い
を吸収するための wrapper"
  (save-match-data
    (if xdic:left-margin-ignored-by-fill-region
	;; Emacs-19.28 附属の fill-region は、left-margin を無視するので強制的に indent する
	(let ((fill-column (- fill-column xdic:left-margin)))
	  (fill-region start end)
	  (indent-region start (point) xdic:left-margin))
      (fill-region start end))
    (save-excursion			; 余分な空行を削除する
      (beginning-of-line)
      (if (looking-at "^[ \t]*$")
	  (delete-region (1- (point)) (match-end 0)))
      )))



(defun xdic:format-buffer (s) "\
検索結果を読みやすいように整形する関数
整形後に
  (setq buffer-read-only t)
  (set-buffer-modified-p nil)
を行なう"
  (let ((l))
    (delete-region (point-min) (point))	; ポイントよりも前の部分を削除する
    (message "Formatting dictionary...")
    (save-match-data		; 指定された文字列で始まる項目のみを対象とする
      (setq s (concat "\\(" (regexp-quote s) "[^\t]*\\)\t"))
      (while (looking-at s)
	(overlay-put (make-overlay (match-beginning 1) (match-end 1))
		     'face 'bold)	; 単語を太文字にする
	(goto-char (match-end 1))
	(delete-char 1)			; 区切りのタブを取り除く
	(insert "\n")
	(xdic:fill-region (point) (progn (end-of-line) (point)))
	(forward-char 1)))
    (delete-region (point) (point-max))	; 残りの部分も削除する
    (setq buffer-read-only t)
    (set-buffer-modified-p nil)
    (goto-char (point-min))))



;;; 単語を辞書で調べる関数
(defun xdic:describe-word (word)
  "Display the meaning of word in Japanese."
  (interactive (list (xdic:read-from-minibuffer)))
  (if (< (length word) 2)
      (setq word (xdic:read-from-minibuffer
		  (format "\"%s\" is too short word. Input word again : " word)
		  word)))
  (let ((l)(case-fold-search t))	; 大文字/小文字を区別しない
    (cond
     ((and (setq l (stem:stripping-suffix word))
	   (xdic:lookup-dictionary (car l)))
      (catch 'loop
	(mapcar
	 '(lambda (s)			; 原形を探す
	    (if (re-search-backward (concat "^" (regexp-quote s) "\t") nil t)
		(throw 'loop (xdic:format-buffer s))))
	 (reverse l))
	(goto-char (point-min))		; 原形が見つからなかった場合
	(xdic:format-buffer (car l))
	(message "Can't find word : %s" word))
      (xdic:display-buffer))
     ;; 単語が見つからなかった場合
     (t (message "Can't find word : %s / %s" (car l) word)))))



(defun xdic:describe-word-at-point ()
  "Display the meaning of word at point in Japanese."
  (interactive)
  (xdic:describe-word (or (xdic:word-at-point)
			  (xdic:read-from-minibuffer))))




;;; 次の項目に移動する関数
(defun xdic:forward-item ()
  "Move point to the next item."
  (interactive)
  (let ((o))
    (goto-char (next-overlay-change
		(if (setq o (car (overlays-at (point))))
		    (overlay-end o)
		  (point))))))



;;; 前の項目に移動する関数
(defun xdic:backward-item ()
  "Move point to the previous item."
  (interactive)
  (let ((o))
    (goto-char (previous-overlay-change
		(previous-overlay-change
		 (if (setq o (car (overlays-at (point))))
		     (overlay-start o)
		   (previous-overlay-change (previous-overlay-change (point)))))))))



(defun xdic:display-buffer () "\
検索結果表示バッファを表示する関数"
  (interactive)
  (let ((w1 (selected-window))
	(w2 (get-buffer-window xdic:buffer-name)))
    (if w2 (select-window w2)
      (setq w2 (select-window (if (one-window-p)
				  (split-window w1 (- (window-height) xdic:window-height))
				(next-window))))
      (set-window-buffer w2 xdic:buffer-name))
    (recenter 0)
    (if xdic:disable-select-window (select-window w1))))



(defun xdic:other-window () "\
検索表示バッファから元のバッファに戻る関数"
  (interactive)
  (let ((w (selected-window)))
    (if (and (string= (buffer-name (window-buffer w))
		      xdic:buffer-name)
	     (one-window-p))
	(progn
	  (split-window w (- (window-height) xdic:window-height))
	  (set-window-buffer w (other-buffer)))
      (other-window -1))))



(defun xdic:close-window () "\
検索表示バッファを表示しているウインドウを消去する関数
数値引数を前置した場合は、検索表示バッファを削除する"
  (interactive)
  (let ((w (get-buffer-window xdic:buffer-name)))
    (if w
	(cond
	 ((= (window-height w) xdic:window-height)
	  (delete-window w))
	 (t
	  (set-window-buffer w (other-buffer))
	  (select-window (next-window)))
	 )))
  (if current-prefix-arg (kill-buffer xdic:buffer-name)))



;;; 辞書を閲覧する major-mode
(defun xdic-mode () "\
辞書を閲覧するメジャーモード

key		binding
---		-------

w		別の単語を検索する
SPC		スクロールアップ
b		スクロールダウン
n		次の項目
p		前の項目
TAB		次の項目
M-TAB		前の項目
o		辞書を閲覧しているウインドウから他のウインドウに移る
q		辞書を閲覧しているウインドウを消す
Q		辞書を閲覧しているウインドウを削除する
<		バッファの先頭に移動
>		バッファの終端に移動
?		ヘルプ表示
h		1文字戻る
j		1行進む
k		1行戻る
l		1文字進む
"
  (kill-all-local-variables)
  (make-local-variable 'fill-column)
  (setq major-mode 'xdic-mode
	mode-name   xdic:mode-name
	fill-column xdic:fill-column
	left-margin xdic:left-margin
	xdic-mode-map (make-keymap))
  (define-key xdic-mode-map " " 'scroll-up)
  (define-key xdic-mode-map "b" 'scroll-down)
  (define-key xdic-mode-map [backspace] 'scroll-down)
  (define-key xdic-mode-map [delete] 'scroll-down)
  (define-key xdic-mode-map "\C-?" 'scroll-down)
  (define-key xdic-mode-map "n" 'xdic:forward-item)
  (define-key xdic-mode-map "\t" 'xdic:forward-item)
  (define-key xdic-mode-map "p" 'xdic:backward-item)
  (define-key xdic-mode-map "\M-\t" 'xdic:backward-item)
  (define-key xdic-mode-map "o" 'xdic:other-window)
  (define-key xdic-mode-map "q" 'xdic:close-window)
  (define-key xdic-mode-map "Q" '(lambda ()
				   "検索表示バッファを削除する"
				   (interactive)
				   (let ((current-prefix-arg t))
				     (xdic:close-window))))
  (define-key xdic-mode-map "w" 'xdic:describe-word)
  (define-key xdic-mode-map "<" '(lambda ()
				   "バッファの先頭に移動"
				   (interactive)
				   (goto-char (point-min))))
  (define-key xdic-mode-map ">" '(lambda ()
				   "バッファの終端に移動"
				   (interactive)
				   (goto-char (point-max))))
  (define-key xdic-mode-map "?" '(lambda ()
				   "ヘルプ表示"
				   (interactive)
				   (describe-function 'xdic-mode)))
  (cond
   ((not xdic:disable-vi-key)
    (define-key xdic-mode-map "h" 'backward-char)
    (define-key xdic-mode-map "j" 'next-line)
    (define-key xdic-mode-map "k" 'previous-line)
    (define-key xdic-mode-map "l" 'forward-char)))
  (use-local-map xdic-mode-map)
  (run-hooks 'xdic-mode-hook))


